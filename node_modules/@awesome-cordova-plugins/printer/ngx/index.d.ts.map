{"version":3,"file":"index.d.ts","sources":["index.d.ts"],"names":[],"mappings":"AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA","sourcesContent":["import { AwesomeCordovaNativePlugin } from '@awesome-cordova-plugins/core';\ninterface FontOptions {\n    name: string;\n    size: number;\n    italic: boolean;\n    bold: boolean;\n    align: 'left' | 'right' | 'center' | 'justified';\n    color: string;\n}\ninterface HeaderFooterLabelOptions {\n    text: string;\n    top: string;\n    right: string;\n    left: string;\n    bottom: string;\n    font: FontOptions;\n    showPageIndex: boolean;\n}\nexport interface PrintOptions {\n    /**\n     * The name of the print job and the document\n     */\n    name?: string;\n    /**\n     * The number of copies for the print task.\n     * Only supported on iOS, Windows\n     */\n    copies?: number;\n    /**\n     * Limits the pages to print even the document contains more.\n     * To skip the last n pages you can assign a negative value on iOS.\n     * Only supported on iOS, Android\n     */\n    pageCount?: number;\n    /**\n     * Specifies the duplex mode to use for the print job.\n     * Either double-sided on short site (duplex:'short'),\n     * double-sided on long site (duplex:'long') or single-sided (duplex:'none').\n     */\n    duplex?: boolean;\n    /**\n     * The orientation of the printed content, portrait or landscape\n     * Portrait by default.\n     */\n    orientation?: 'landscape' | 'portrait';\n    /**\n     * If your application only prints black text, setting this property to true can result in better performance in many cases.\n     * False by default.\n     */\n    monochrome?: boolean;\n    /**\n     * If your application only prints black text, setting this property to true can result in better performance in many cases.\n     * False by default.\n     * Only supported on iOS, Windows\n     */\n    photo?: boolean;\n    /**\n     * Set to false to disable downscaling the image to fit into the content aread.\n     * Only supported on Android\n     */\n    autoFit?: boolean;\n    /**\n     * The network URL to the printer.\n     * Only supported on iOS\n     */\n    printer?: string;\n    /**\n     * Defines the maximum size of the content area.\n     * Only supported on iOS\n     */\n    maxHeight?: string;\n    /**\n     * Defines the maximum size of the content area.\n     * Only supported on iOS\n     */\n    maxWidth?: string;\n    /**\n     * Set to false to avoid margins.\n     * The margins for each printed page. Each printer might have its own minimum margins depends on media type and paper format.\n     */\n    margin?: boolean | {\n        top?: string;\n        left?: string;\n        right?: string;\n        bottom?: string;\n    };\n    ui?: {\n        hideNumberOfCopies?: string;\n        hidePaperFormat?: string;\n        top?: number;\n        left?: number;\n        height?: number;\n        width?: number;\n    };\n    paper?: {\n        width: string;\n        height: string;\n        name: string;\n        length: string;\n    };\n    font?: FontOptions;\n    header?: {\n        height: string;\n        labels: string[];\n        label: HeaderFooterLabelOptions;\n    };\n    footer?: {\n        height: string;\n        labels: string[];\n        label: HeaderFooterLabelOptions;\n    };\n}\n/**\n * @name Printer\n * @description Prints documents or HTML rendered content\n * @usage\n * ```typescript\n * import { Printer, PrintOptions } from '@awesome-cordova-plugins/printer/ngx';\n *\n * constructor(private printer: Printer) { }\n *\n * ...\n *\n * this.printer.isAvailable().then(onSuccess, onError);\n *\n * let options: PrintOptions = {\n *      name: 'MyDocument',\n *      duplex: true,\n *      orientation: 'landscape',\n *      monochrome: true\n * }\n *\n * this.printer.print(content, options).then(onSuccess, onError);\n * ```\n * @interfaces\n * PrintOptions\n */\nexport declare class Printer extends AwesomeCordovaNativePlugin {\n    /**\n     * Checks whether the device is capable of printing (uses `check()` internally)\n     *\n     * @returns {Promise<boolean>}\n     */\n    isAvailable(): Promise<boolean>;\n    /**\n     * Checks To check if printing is supported in general\n     *\n     * @returns {Promise<any>} returns a promise that resolve with an object indicating whether printing is available\n     */\n    check(): Promise<any>;\n    /**\n     * Displays a system interface allowing the user to select an available printer. To speak with a printer directly you need to know the network address by picking them before via `printer.pick`.\n     *\n     * @returns {Promise<any>}\n     */\n    pick(): Promise<any>;\n    /**\n     * Sends content to the printer.\n     *\n     * @param content {string | HTMLElement} The content to print. Can be a URL or an HTML string. If a HTML DOM Object is provided, its innerHtml property value will be used.\n     * @param options {PrintOptions} optional. The options to pass to the printer\n     * @returns {Promise<any>}\n     */\n    print(content?: string | HTMLElement, options?: PrintOptions): Promise<any>;\n}\nexport {};\n"]}