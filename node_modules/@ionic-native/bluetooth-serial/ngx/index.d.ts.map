{"version":3,"file":"index.d.ts","sources":["index.d.ts"],"names":[],"mappingssourcesContent":["import { IonicNativePlugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs';\n/**\n * @name Bluetooth Serial\n * @description This plugin enables serial communication over Bluetooth. It was written for communicating between Android or iOS and an Arduino (not Android to Android or iOS to iOS).\n * @usage\n * ```typescript\n * import { BluetoothSerial } from '@ionic-native/bluetooth-serial/ngx';\n *\n * constructor(private bluetoothSerial: BluetoothSerial) { }\n *\n *\n * // Write a string\n * this.bluetoothSerial.write('hello world').then(success, failure);\n *\n * // Array of int or bytes\n * this.bluetoothSerial.write([186, 220, 222]).then(success, failure);\n *\n * // Typed Array\n * var data = new Uint8Array(4);\n * data[0] = 0x41;\n * data[1] = 0x42;\n * data[2] = 0x43;\n * data[3] = 0x44;\n * this.bluetoothSerial.write(data).then(success, failure);\n *\n * // Array Buffer\n * this.bluetoothSerial.write(data.buffer).then(success, failure);\n * ```\n */\nexport declare class BluetoothSerial extends IonicNativePlugin {\n    /**\n     * Connect to a Bluetooth device\n     * @param {string} macAddress_or_uuid Identifier of the remote device\n     * @returns {Observable<any>} Subscribe to connect, unsubscribe to disconnect.\n     */\n    connect(macAddress_or_uuid: string): Observable<any>;\n    /**\n     * Connect insecurely to a Bluetooth device\n     * @param {string} macAddress Identifier of the remote device\n     * @returns {Observable<any>} Subscribe to connect, unsubscribe to disconnect.\n     */\n    connectInsecure(macAddress: string): Observable<any>;\n    /**\n     * Disconnect from the connected device\n     * @returns {Promise<any>}\n     */\n    disconnect(): Promise<any>;\n    /**\n     * Writes data to the serial port\n     * @param {any} data ArrayBuffer of data\n     * @returns {Promise<any>} returns a promise when data has been written\n     */\n    write(data: any): Promise<any>;\n    /**\n     * Gets the number of bytes of data available\n     * @returns {Promise<any>} returns a promise that contains the available bytes\n     */\n    available(): Promise<any>;\n    /**\n     * Reads data from the buffer\n     * @returns {Promise<any>} returns a promise with data from the buffer\n     */\n    read(): Promise<any>;\n    /**\n     * Reads data from the buffer until it reaches a delimiter\n     * @param {string} delimiter string that you want to search until\n     * @returns {Promise<any>} returns a promise\n     */\n    readUntil(delimiter: string): Promise<any>;\n    /**\n     * Subscribe to be notified when data is received\n     * @param {string} delimiter the string you want to watch for\n     * @returns {Observable<any>} returns an observable.\n     */\n    subscribe(delimiter: string): Observable<any>;\n    /**\n     * Subscribe to be notified when data is received\n     * @returns {Observable<any>} returns an observable\n     */\n    subscribeRawData(): Observable<any>;\n    /**\n     * Clears data in buffer\n     * @returns {Promise<any>} returns a promise when completed\n     */\n    clear(): Promise<any>;\n    /**\n     * Lists bonded devices\n     * @returns {Promise<any>} returns a promise\n     */\n    list(): Promise<any>;\n    /**\n     * Reports if bluetooth is enabled\n     * @returns {Promise<any>} returns a promise\n     */\n    isEnabled(): Promise<any>;\n    /**\n     * Reports the connection status\n     * @returns {Promise<any>} returns a promise\n     */\n    isConnected(): Promise<any>;\n    /**\n     * Reads the RSSI from the connected peripheral\n     * @returns {Promise<any>} returns a promise\n     */\n    readRSSI(): Promise<any>;\n    /**\n     * Show the Bluetooth settings on the device\n     * @returns {Promise<any>} returns a promise\n     */\n    showBluetoothSettings(): Promise<any>;\n    /**\n     * Enable Bluetooth on the device\n     * @returns {Promise<any>} returns a promise\n     */\n    enable(): Promise<any>;\n    /**\n     * Discover unpaired devices\n     * @returns {Promise<any>} returns a promise\n     */\n    discoverUnpaired(): Promise<any>;\n    /**\n     * Subscribe to be notified on Bluetooth device discovery. Discovery process must be initiated with the `discoverUnpaired` function.\n     * @returns {Observable<any>} Returns an observable\n     */\n    setDeviceDiscoveredListener(): Observable<any>;\n    /**\n     * Sets the human readable device name that is broadcasted to other devices\n     * @param {string} newName Desired name of device\n     */\n    setName(newName: string): void;\n    /**\n     * Makes the device discoverable by other devices\n     * @param {number} discoverableDuration Desired number of seconds device should be discoverable for\n     */\n    setDiscoverable(discoverableDuration: number): void;\n}\n"]}