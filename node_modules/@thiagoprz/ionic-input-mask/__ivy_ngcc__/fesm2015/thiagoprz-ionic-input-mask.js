import { Directive, Attribute, NgModule } from '@angular/core';
import { NgModel } from '@angular/forms';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/forms';
class IonicInputMaskDirective {
    /**
     * Construtor
     * @param {NgModel} model
     * @param {string} pattern
     */
    constructor(model, pattern) {
        this.model = model;
        this.pattern = pattern;
    }
    /**
     * Listener para mudança de valor do input
     * @param event
     */
    onInputChange(event) {
        let value = event.target.value, pattern = this.pattern;
        if (event.keyIdentifier === 'U+0008' || event.keyCode === 8 || event.key === 'Backspace') {
            if (value.length) { //prevent fatal exception when backspacing empty value in progressive web app
                //remove all trailing formatting then delete character
                while (pattern[value.length] && pattern[value.length] !== '*') {
                    value = value.substring(0, value.length - 1);
                }
                //remove all leading formatting to restore placeholder
                if (pattern.substring(0, value.length).indexOf('*') < 0) {
                    value = value.substring(0, value.length - 1);
                }
            }
        }
        else {
            let maskIndex = value.length, formatted = '';
            if (value.length === 1 && value !== pattern[0]) {
                //apply leading formatting
                maskIndex = 0;
                while (maskIndex < pattern.length && pattern[maskIndex] !== '*') {
                    formatted += pattern[maskIndex];
                    maskIndex++;
                }
            }
            formatted += value;
            if (maskIndex < pattern.length) {
                //apply trailing formatting
                while (pattern[maskIndex] !== '*') {
                    formatted += pattern[maskIndex];
                    maskIndex++;
                }
            }
            value = formatted;
        }
        event.target.value = value;
        if (this.model) {
            this.model.update.emit(value);
        }
        return true;
    }
}
IonicInputMaskDirective.ɵfac = function IonicInputMaskDirective_Factory(t) { return new (t || IonicInputMaskDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgModel), ɵngcc0.ɵɵinjectAttribute('mask')); };
IonicInputMaskDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: IonicInputMaskDirective, selectors: [["", "mask", ""]], hostBindings: function IonicInputMaskDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("keydown", function IonicInputMaskDirective_keydown_HostBindingHandler($event) { return ctx.onInputChange($event); });
    } }, features: [ɵngcc0.ɵɵProvidersFeature([NgModel])] });
IonicInputMaskDirective.ctorParameters = () => [
    { type: NgModel },
    { type: String, decorators: [{ type: Attribute, args: ['mask',] }] }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(IonicInputMaskDirective, [{
        type: Directive,
        args: [{
                selector: '[mask]',
                host: {
                    '(keydown)': 'onInputChange($event)'
                },
                providers: [NgModel]
            }]
    }], function () { return [{ type: ɵngcc1.NgModel }, { type: String, decorators: [{
                type: Attribute,
                args: ['mask']
            }] }]; }, null); })();

class IonicInputMaskModule {
}
IonicInputMaskModule.ɵfac = function IonicInputMaskModule_Factory(t) { return new (t || IonicInputMaskModule)(); };
IonicInputMaskModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: IonicInputMaskModule });
IonicInputMaskModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(IonicInputMaskModule, [{
        type: NgModule,
        args: [{
                declarations: [IonicInputMaskDirective],
                imports: [],
                exports: [IonicInputMaskDirective]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(IonicInputMaskModule, { declarations: [IonicInputMaskDirective], exports: [IonicInputMaskDirective] }); })();

/*
 * Public API Surface of ionic-input-mask
 */

/**
 * Generated bundle index. Do not edit.
 */

export { IonicInputMaskDirective, IonicInputMaskModule };

//# sourceMappingURL=thiagoprz-ionic-input-mask.js.map