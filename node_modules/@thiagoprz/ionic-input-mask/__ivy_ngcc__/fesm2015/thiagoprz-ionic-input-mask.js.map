{"version":3,"file":"thiagoprz-ionic-input-mask.js","sources":["../../../../projects/thiagoprz/ionic-input-mask/src/lib/ionic-input-mask.directive.ts","../../../../projects/thiagoprz/ionic-input-mask/src/lib/ionic-input-mask.module.ts","../../../../projects/thiagoprz/ionic-input-mask/src/public-api.ts","../../../../projects/thiagoprz/ionic-input-mask/src/thiagoprz-ionic-input-mask.ts"],"names":[],"mappings":"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","sourcesContent":["import { Attribute, Directive } from '@angular/core';\nimport { NgModel } from \"@angular/forms\";\n\n@Directive({\n  selector: '[mask]',\n  host: {\n    '(keydown)': 'onInputChange($event)'\n  },\n  providers: [NgModel]\n})\nexport class IonicInputMaskDirective {\n\n  pattern: string;\n\n  /**\n   * Construtor\n   * @param {NgModel} model\n   * @param {string} pattern\n   */\n  constructor(public model: NgModel,\n              @Attribute('mask') pattern: string) {\n    this.pattern = pattern;\n  }\n\n  /**\n   * Listener para mudan√ßa de valor do input\n   * @param event\n   */\n  onInputChange(event: any) {\n    let value = event.target.value,\n      pattern = this.pattern;\n    if (event.keyIdentifier === 'U+0008' || event.keyCode === 8 || event.key === 'Backspace') {\n      if (value.length) { //prevent fatal exception when backspacing empty value in progressive web app\n        //remove all trailing formatting then delete character\n        while (pattern[value.length] && pattern[value.length] !== '*') {\n          value = value.substring(0, value.length - 1);\n        }\n        //remove all leading formatting to restore placeholder\n        if (pattern.substring(0, value.length).indexOf('*') < 0) {\n          value = value.substring(0, value.length - 1);\n        }\n      }\n    } else {\n      let maskIndex = value.length,\n        formatted = '';\n      if (value.length === 1 && value !== pattern[0]) {\n        //apply leading formatting\n        maskIndex = 0;\n        while (maskIndex < pattern.length && pattern[maskIndex] !== '*') {\n          formatted += pattern[maskIndex];\n          maskIndex++;\n        }\n      }\n      formatted += value;\n      if (maskIndex < pattern.length) {\n        //apply trailing formatting\n        while (pattern[maskIndex] !== '*') {\n          formatted += pattern[maskIndex];\n          maskIndex++;\n        }\n      }\n      value = formatted;\n    }\n    event.target.value = value;\n    if (this.model) {\n      this.model.update.emit(value);\n    }\n    return true;\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport {IonicInputMaskDirective} from \"./ionic-input-mask.directive\";\n\n\n\n@NgModule({\n  declarations: [IonicInputMaskDirective],\n  imports: [\n  ],\n  exports: [IonicInputMaskDirective]\n})\nexport class IonicInputMaskModule { }\n","/*\n * Public API Surface of ionic-input-mask\n */\n\nexport * from './lib/ionic-input-mask.directive';\nexport * from './lib/ionic-input-mask.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}