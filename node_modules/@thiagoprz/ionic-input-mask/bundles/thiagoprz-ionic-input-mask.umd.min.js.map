{"version":3,"sources":["../../../../projects/thiagoprz/ionic-input-mask/src/lib/ionic-input-mask.directive.ts","../../../../projects/thiagoprz/ionic-input-mask/src/lib/ionic-input-mask.module.ts"],"names":["IonicInputMaskDirective","model","pattern","this","prototype","onInputChange","event","value","target","keyIdentifier","keyCode","key","length","substring","indexOf","maskIndex","formatted","update","emit","Directive","args","selector","host","(keydown)","providers","NgModel","Attribute","NgModule","declarations","imports","exports"],"mappings":"+bAmBE,SAAAA,EAAmBC,EACYC,GADZC,KAAAF,MAAAA,EAEjBE,KAAKD,QAAUA,SAOjBF,EAAAI,UAAAC,cAAA,SAAcC,GACZ,IAAIC,EAAQD,EAAME,OAAOD,MACvBL,EAAUC,KAAKD,QACjB,GAA4B,WAAxBI,EAAMG,eAAgD,IAAlBH,EAAMI,SAA+B,cAAdJ,EAAMK,KACnE,GAAIJ,EAAMK,OAAQ,CAEhB,KAAOV,EAAQK,EAAMK,SAAqC,MAA1BV,EAAQK,EAAMK,SAC5CL,EAAQA,EAAMM,UAAU,EAAGN,EAAMK,OAAS,GAGxCV,EAAQW,UAAU,EAAGN,EAAMK,QAAQE,QAAQ,KAAO,IACpDP,EAAQA,EAAMM,UAAU,EAAGN,EAAMK,OAAS,SAGzC,CACL,IAAIG,EAAYR,EAAMK,OACpBI,EAAY,GACd,GAAqB,IAAjBT,EAAMK,QAAgBL,IAAUL,EAAQ,GAG1C,IADAa,EAAY,EACLA,EAAYb,EAAQU,QAAiC,MAAvBV,EAAQa,IAC3CC,GAAad,EAAQa,GACrBA,IAIJ,GADAC,GAAaT,EACTQ,EAAYb,EAAQU,OAEtB,KAA8B,MAAvBV,EAAQa,IACbC,GAAad,EAAQa,GACrBA,IAGJR,EAAQS,EAMV,OAJAV,EAAME,OAAOD,MAAQA,EACjBJ,KAAKF,OACPE,KAAKF,MAAMgB,OAAOC,KAAKX,IAElB,4BAhEVY,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,SACVC,KAAM,CACJC,YAAa,yBAEfC,UAAW,CAACC,EAAAA,sDAPLA,EAAAA,wCAmBMC,EAAAA,UAASN,KAAA,CAAC,mBCTzB,iCANCO,EAAAA,SAAQP,KAAA,CAAC,CACRQ,aAAc,CAAC5B,GACf6B,QAAS,GAETC,QAAS,CAAC9B","sourcesContent":["import { Attribute, Directive } from '@angular/core';\nimport { NgModel } from \"@angular/forms\";\n\n@Directive({\n  selector: '[mask]',\n  host: {\n    '(keydown)': 'onInputChange($event)'\n  },\n  providers: [NgModel]\n})\nexport class IonicInputMaskDirective {\n\n  pattern: string;\n\n  /**\n   * Construtor\n   * @param {NgModel} model\n   * @param {string} pattern\n   */\n  constructor(public model: NgModel,\n              @Attribute('mask') pattern: string) {\n    this.pattern = pattern;\n  }\n\n  /**\n   * Listener para mudan√ßa de valor do input\n   * @param event\n   */\n  onInputChange(event: any) {\n    let value = event.target.value,\n      pattern = this.pattern;\n    if (event.keyIdentifier === 'U+0008' || event.keyCode === 8 || event.key === 'Backspace') {\n      if (value.length) { //prevent fatal exception when backspacing empty value in progressive web app\n        //remove all trailing formatting then delete character\n        while (pattern[value.length] && pattern[value.length] !== '*') {\n          value = value.substring(0, value.length - 1);\n        }\n        //remove all leading formatting to restore placeholder\n        if (pattern.substring(0, value.length).indexOf('*') < 0) {\n          value = value.substring(0, value.length - 1);\n        }\n      }\n    } else {\n      let maskIndex = value.length,\n        formatted = '';\n      if (value.length === 1 && value !== pattern[0]) {\n        //apply leading formatting\n        maskIndex = 0;\n        while (maskIndex < pattern.length && pattern[maskIndex] !== '*') {\n          formatted += pattern[maskIndex];\n          maskIndex++;\n        }\n      }\n      formatted += value;\n      if (maskIndex < pattern.length) {\n        //apply trailing formatting\n        while (pattern[maskIndex] !== '*') {\n          formatted += pattern[maskIndex];\n          maskIndex++;\n        }\n      }\n      value = formatted;\n    }\n    event.target.value = value;\n    if (this.model) {\n      this.model.update.emit(value);\n    }\n    return true;\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport {IonicInputMaskDirective} from \"./ionic-input-mask.directive\";\n\n\n\n@NgModule({\n  declarations: [IonicInputMaskDirective],\n  imports: [\n  ],\n  exports: [IonicInputMaskDirective]\n})\nexport class IonicInputMaskModule { }\n"]}