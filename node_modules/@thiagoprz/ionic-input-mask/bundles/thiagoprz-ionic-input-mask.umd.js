(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/forms')) :
    typeof define === 'function' && define.amd ? define('@thiagoprz/ionic-input-mask', ['exports', '@angular/core', '@angular/forms'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.thiagoprz = global.thiagoprz || {}, global.thiagoprz['ionic-input-mask'] = {}), global.ng.core, global.ng.forms));
}(this, (function (exports, core, forms) { 'use strict';

    var IonicInputMaskDirective = /** @class */ (function () {
        /**
         * Construtor
         * @param {NgModel} model
         * @param {string} pattern
         */
        function IonicInputMaskDirective(model, pattern) {
            this.model = model;
            this.pattern = pattern;
        }
        /**
         * Listener para mudan√ßa de valor do input
         * @param event
         */
        IonicInputMaskDirective.prototype.onInputChange = function (event) {
            var value = event.target.value, pattern = this.pattern;
            if (event.keyIdentifier === 'U+0008' || event.keyCode === 8 || event.key === 'Backspace') {
                if (value.length) { //prevent fatal exception when backspacing empty value in progressive web app
                    //remove all trailing formatting then delete character
                    while (pattern[value.length] && pattern[value.length] !== '*') {
                        value = value.substring(0, value.length - 1);
                    }
                    //remove all leading formatting to restore placeholder
                    if (pattern.substring(0, value.length).indexOf('*') < 0) {
                        value = value.substring(0, value.length - 1);
                    }
                }
            }
            else {
                var maskIndex = value.length, formatted = '';
                if (value.length === 1 && value !== pattern[0]) {
                    //apply leading formatting
                    maskIndex = 0;
                    while (maskIndex < pattern.length && pattern[maskIndex] !== '*') {
                        formatted += pattern[maskIndex];
                        maskIndex++;
                    }
                }
                formatted += value;
                if (maskIndex < pattern.length) {
                    //apply trailing formatting
                    while (pattern[maskIndex] !== '*') {
                        formatted += pattern[maskIndex];
                        maskIndex++;
                    }
                }
                value = formatted;
            }
            event.target.value = value;
            if (this.model) {
                this.model.update.emit(value);
            }
            return true;
        };
        return IonicInputMaskDirective;
    }());
    IonicInputMaskDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: '[mask]',
                    host: {
                        '(keydown)': 'onInputChange($event)'
                    },
                    providers: [forms.NgModel]
                },] }
    ];
    IonicInputMaskDirective.ctorParameters = function () { return [
        { type: forms.NgModel },
        { type: String, decorators: [{ type: core.Attribute, args: ['mask',] }] }
    ]; };

    var IonicInputMaskModule = /** @class */ (function () {
        function IonicInputMaskModule() {
        }
        return IonicInputMaskModule;
    }());
    IonicInputMaskModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [IonicInputMaskDirective],
                    imports: [],
                    exports: [IonicInputMaskDirective]
                },] }
    ];

    /*
     * Public API Surface of ionic-input-mask
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.IonicInputMaskDirective = IonicInputMaskDirective;
    exports.IonicInputMaskModule = IonicInputMaskModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=thiagoprz-ionic-input-mask.umd.js.map
