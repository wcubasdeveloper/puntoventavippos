import { Attribute, Directive } from '@angular/core';
import { NgModel } from "@angular/forms";
export class IonicInputMaskDirective {
    /**
     * Construtor
     * @param {NgModel} model
     * @param {string} pattern
     */
    constructor(model, pattern) {
        this.model = model;
        this.pattern = pattern;
    }
    /**
     * Listener para mudan√ßa de valor do input
     * @param event
     */
    onInputChange(event) {
        let value = event.target.value, pattern = this.pattern;
        if (event.keyIdentifier === 'U+0008' || event.keyCode === 8 || event.key === 'Backspace') {
            if (value.length) { //prevent fatal exception when backspacing empty value in progressive web app
                //remove all trailing formatting then delete character
                while (pattern[value.length] && pattern[value.length] !== '*') {
                    value = value.substring(0, value.length - 1);
                }
                //remove all leading formatting to restore placeholder
                if (pattern.substring(0, value.length).indexOf('*') < 0) {
                    value = value.substring(0, value.length - 1);
                }
            }
        }
        else {
            let maskIndex = value.length, formatted = '';
            if (value.length === 1 && value !== pattern[0]) {
                //apply leading formatting
                maskIndex = 0;
                while (maskIndex < pattern.length && pattern[maskIndex] !== '*') {
                    formatted += pattern[maskIndex];
                    maskIndex++;
                }
            }
            formatted += value;
            if (maskIndex < pattern.length) {
                //apply trailing formatting
                while (pattern[maskIndex] !== '*') {
                    formatted += pattern[maskIndex];
                    maskIndex++;
                }
            }
            value = formatted;
        }
        event.target.value = value;
        if (this.model) {
            this.model.update.emit(value);
        }
        return true;
    }
}
IonicInputMaskDirective.decorators = [
    { type: Directive, args: [{
                selector: '[mask]',
                host: {
                    '(keydown)': 'onInputChange($event)'
                },
                providers: [NgModel]
            },] }
];
IonicInputMaskDirective.ctorParameters = () => [
    { type: NgModel },
    { type: String, decorators: [{ type: Attribute, args: ['mask',] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW9uaWMtaW5wdXQtbWFzay5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy90aGlhZ29wcnovaW9uaWMtaW5wdXQtbWFzay9zcmMvbGliL2lvbmljLWlucHV0LW1hc2suZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQVN6QyxNQUFNLE9BQU8sdUJBQXVCO0lBSWxDOzs7O09BSUc7SUFDSCxZQUFtQixLQUFjLEVBQ0YsT0FBZTtRQUQzQixVQUFLLEdBQUwsS0FBSyxDQUFTO1FBRS9CLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0lBQ3pCLENBQUM7SUFFRDs7O09BR0c7SUFDSCxhQUFhLENBQUMsS0FBVTtRQUN0QixJQUFJLEtBQUssR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssRUFDNUIsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDekIsSUFBSSxLQUFLLENBQUMsYUFBYSxLQUFLLFFBQVEsSUFBSSxLQUFLLENBQUMsT0FBTyxLQUFLLENBQUMsSUFBSSxLQUFLLENBQUMsR0FBRyxLQUFLLFdBQVcsRUFBRTtZQUN4RixJQUFJLEtBQUssQ0FBQyxNQUFNLEVBQUUsRUFBRSw2RUFBNkU7Z0JBQy9GLHNEQUFzRDtnQkFDdEQsT0FBTyxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssR0FBRyxFQUFFO29CQUM3RCxLQUFLLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztpQkFDOUM7Z0JBQ0Qsc0RBQXNEO2dCQUN0RCxJQUFJLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFO29CQUN2RCxLQUFLLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztpQkFDOUM7YUFDRjtTQUNGO2FBQU07WUFDTCxJQUFJLFNBQVMsR0FBRyxLQUFLLENBQUMsTUFBTSxFQUMxQixTQUFTLEdBQUcsRUFBRSxDQUFDO1lBQ2pCLElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksS0FBSyxLQUFLLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDOUMsMEJBQTBCO2dCQUMxQixTQUFTLEdBQUcsQ0FBQyxDQUFDO2dCQUNkLE9BQU8sU0FBUyxHQUFHLE9BQU8sQ0FBQyxNQUFNLElBQUksT0FBTyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsRUFBRTtvQkFDL0QsU0FBUyxJQUFJLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztvQkFDaEMsU0FBUyxFQUFFLENBQUM7aUJBQ2I7YUFDRjtZQUNELFNBQVMsSUFBSSxLQUFLLENBQUM7WUFDbkIsSUFBSSxTQUFTLEdBQUcsT0FBTyxDQUFDLE1BQU0sRUFBRTtnQkFDOUIsMkJBQTJCO2dCQUMzQixPQUFPLE9BQU8sQ0FBQyxTQUFTLENBQUMsS0FBSyxHQUFHLEVBQUU7b0JBQ2pDLFNBQVMsSUFBSSxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7b0JBQ2hDLFNBQVMsRUFBRSxDQUFDO2lCQUNiO2FBQ0Y7WUFDRCxLQUFLLEdBQUcsU0FBUyxDQUFDO1NBQ25CO1FBQ0QsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQzNCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNkLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUMvQjtRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQzs7O1lBakVGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsUUFBUTtnQkFDbEIsSUFBSSxFQUFFO29CQUNKLFdBQVcsRUFBRSx1QkFBdUI7aUJBQ3JDO2dCQUNELFNBQVMsRUFBRSxDQUFDLE9BQU8sQ0FBQzthQUNyQjs7O1lBUlEsT0FBTzt5Q0FtQkQsU0FBUyxTQUFDLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBdHRyaWJ1dGUsIERpcmVjdGl2ZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmdNb2RlbCB9IGZyb20gXCJAYW5ndWxhci9mb3Jtc1wiO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbbWFza10nLFxuICBob3N0OiB7XG4gICAgJyhrZXlkb3duKSc6ICdvbklucHV0Q2hhbmdlKCRldmVudCknXG4gIH0sXG4gIHByb3ZpZGVyczogW05nTW9kZWxdXG59KVxuZXhwb3J0IGNsYXNzIElvbmljSW5wdXRNYXNrRGlyZWN0aXZlIHtcblxuICBwYXR0ZXJuOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIENvbnN0cnV0b3JcbiAgICogQHBhcmFtIHtOZ01vZGVsfSBtb2RlbFxuICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0dGVyblxuICAgKi9cbiAgY29uc3RydWN0b3IocHVibGljIG1vZGVsOiBOZ01vZGVsLFxuICAgICAgICAgICAgICBAQXR0cmlidXRlKCdtYXNrJykgcGF0dGVybjogc3RyaW5nKSB7XG4gICAgdGhpcy5wYXR0ZXJuID0gcGF0dGVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBMaXN0ZW5lciBwYXJhIG11ZGFuw6dhIGRlIHZhbG9yIGRvIGlucHV0XG4gICAqIEBwYXJhbSBldmVudFxuICAgKi9cbiAgb25JbnB1dENoYW5nZShldmVudDogYW55KSB7XG4gICAgbGV0IHZhbHVlID0gZXZlbnQudGFyZ2V0LnZhbHVlLFxuICAgICAgcGF0dGVybiA9IHRoaXMucGF0dGVybjtcbiAgICBpZiAoZXZlbnQua2V5SWRlbnRpZmllciA9PT0gJ1UrMDAwOCcgfHwgZXZlbnQua2V5Q29kZSA9PT0gOCB8fCBldmVudC5rZXkgPT09ICdCYWNrc3BhY2UnKSB7XG4gICAgICBpZiAodmFsdWUubGVuZ3RoKSB7IC8vcHJldmVudCBmYXRhbCBleGNlcHRpb24gd2hlbiBiYWNrc3BhY2luZyBlbXB0eSB2YWx1ZSBpbiBwcm9ncmVzc2l2ZSB3ZWIgYXBwXG4gICAgICAgIC8vcmVtb3ZlIGFsbCB0cmFpbGluZyBmb3JtYXR0aW5nIHRoZW4gZGVsZXRlIGNoYXJhY3RlclxuICAgICAgICB3aGlsZSAocGF0dGVyblt2YWx1ZS5sZW5ndGhdICYmIHBhdHRlcm5bdmFsdWUubGVuZ3RoXSAhPT0gJyonKSB7XG4gICAgICAgICAgdmFsdWUgPSB2YWx1ZS5zdWJzdHJpbmcoMCwgdmFsdWUubGVuZ3RoIC0gMSk7XG4gICAgICAgIH1cbiAgICAgICAgLy9yZW1vdmUgYWxsIGxlYWRpbmcgZm9ybWF0dGluZyB0byByZXN0b3JlIHBsYWNlaG9sZGVyXG4gICAgICAgIGlmIChwYXR0ZXJuLnN1YnN0cmluZygwLCB2YWx1ZS5sZW5ndGgpLmluZGV4T2YoJyonKSA8IDApIHtcbiAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnN1YnN0cmluZygwLCB2YWx1ZS5sZW5ndGggLSAxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgbWFza0luZGV4ID0gdmFsdWUubGVuZ3RoLFxuICAgICAgICBmb3JtYXR0ZWQgPSAnJztcbiAgICAgIGlmICh2YWx1ZS5sZW5ndGggPT09IDEgJiYgdmFsdWUgIT09IHBhdHRlcm5bMF0pIHtcbiAgICAgICAgLy9hcHBseSBsZWFkaW5nIGZvcm1hdHRpbmdcbiAgICAgICAgbWFza0luZGV4ID0gMDtcbiAgICAgICAgd2hpbGUgKG1hc2tJbmRleCA8IHBhdHRlcm4ubGVuZ3RoICYmIHBhdHRlcm5bbWFza0luZGV4XSAhPT0gJyonKSB7XG4gICAgICAgICAgZm9ybWF0dGVkICs9IHBhdHRlcm5bbWFza0luZGV4XTtcbiAgICAgICAgICBtYXNrSW5kZXgrKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZm9ybWF0dGVkICs9IHZhbHVlO1xuICAgICAgaWYgKG1hc2tJbmRleCA8IHBhdHRlcm4ubGVuZ3RoKSB7XG4gICAgICAgIC8vYXBwbHkgdHJhaWxpbmcgZm9ybWF0dGluZ1xuICAgICAgICB3aGlsZSAocGF0dGVyblttYXNrSW5kZXhdICE9PSAnKicpIHtcbiAgICAgICAgICBmb3JtYXR0ZWQgKz0gcGF0dGVyblttYXNrSW5kZXhdO1xuICAgICAgICAgIG1hc2tJbmRleCsrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YWx1ZSA9IGZvcm1hdHRlZDtcbiAgICB9XG4gICAgZXZlbnQudGFyZ2V0LnZhbHVlID0gdmFsdWU7XG4gICAgaWYgKHRoaXMubW9kZWwpIHtcbiAgICAgIHRoaXMubW9kZWwudXBkYXRlLmVtaXQodmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG59XG4iXX0=